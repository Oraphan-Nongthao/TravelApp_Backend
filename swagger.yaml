openapi: 3.0.0
info:
  title: Travel App API
  description: API for managing user profiles.
  version: 0.1.9

servers:
  - url: http://localhost:3000
    description: Localhost server on port 3000

paths:

  #----------------------------- sign up ----------------------------- #

  /signup:
    post:
      summary: User registration
      tags: [signup]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - account_email
                - account_password
                - confirm_password
              properties:
                account_email:
                  type: string
                account_password:
                  type: string  
                confirm_password:
                  type: string
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid input or email already registered
        '500':
          description: Internal server error

#----------------------------- accounts_list ----------------------------- #

  /accounts_list:
    get:
      tags: [accounts_list]
      summary: Returns a list of accounts_list.
      responses:
        "200":
          description: A JSON array of accounts_list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    account_id:
                      format: int64
                    account_email:
                      type: string
                    account_name:
                      type: string
                    account_gender:
                      type: string
                    account_birthday:
                      type: string
                      format: date
                    account_picture:
                      type: string
                    account_telephone:
                      type: string
                    latitude:
                      type: number
                      format: float
                    longitude:
                      type: number
                      format: float
                    created_at:
                      type: string
                      format: date-time
                    updated_at:
                      type: string
                      format: date-time

  /accounts_list/{id}:
      get:
        summary: Returns a profile by ID.
        tags: [accounts_list]
        parameters:
          - name: id
            in: path
            required: true
            description: User ID
            schema:
              type: integer
              format: int64
              minimum: 1
        responses: 
          '200':
            description: Profile found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    account_id:
                      type: integer
                      format: int64
                    account_email:
                      type: string
                    account_name:
                      type: string
                    account_gender:
                      type: string
                    account_birthday:
                      type: string
                      format: date
                    account_picture:
                      type: string
                    account_telephone:
                      type: string
                    latitude:
                      type: number
                      format: float
                    longitude:
                      type: number
                      format: float
                    created_at:
                      type: string
                      format: date-time
                    updated_at:
                      type: string
                      format: date-time
          '404':
            description: Profile not found
  

#----------------------------- sign in ----------------------------- #
  /signin:
    post:
      summary: User sign-in (authentication)
      tags: [signin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - account_email
                - account_password
              properties:
                account_email:
                  type: string
                account_password:
                  type: string
      responses:
        '200':
          description: User signed in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
        '400':
          description: Invalid credentials
        '500':
          description: Internal server error

#----------------------------- register_account ----------------------------- #

  /profile/{id}:
    put:
      summary: Update user profile
      tags: [profile]
      description: Update user profile information, except for account_password.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                account_email:
                  type: string
                  format: email
                account_name:
                  type: string
                account_gender:
                  type: string
                  enum: [male, female, other]
                account_birthday:
                  type: string
                  format: date
                account_picture:
                  type: string
                  format: uri
                account_telephone:
                  type: string
              required:
                - account_email
                - account_name
          multipart/form-data:
            schema:
              type: object
              properties:
                account_email:
                  type: string
                  format: email
                account_name:
                  type: string
                account_gender:
                  type: string
                  enum: [male, female, other]
                account_birthday:
                  type: string
                  format: date
                account_picture:
                  type: string
                  format: binary  # รองรับการอัปโหลดไฟล์
                account_telephone:
                  type: string
              required:
                - account_email
                - account_name
      responses:
        200:
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        400:
          description: Bad request (missing ID or invalid data)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        404:
          description: User not found or no changes made
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        500:
          description: Database error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  details:
                    type: string

  /profile_location/{id}:
    post:
      summary: Update user location
      description: Update latitude and longitude for a specific user ID
      tags: [profile]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                latitude:
                  type: number
                  example: 13.7563
                longitude:
                  type: number
                  example: 100.5018
      responses:
        200:
          description: Location updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Location updated successfully"
        400:
          description: Invalid input
        404:
          description: User not found
        500:
          description: Database error

#----------------------------- province -----------------------------#
  /province/{id}:
    get:
      summary: Get a geography by ID
      tags: [location_region]
      parameters:
        - name: id 
          in: path
          required: true
          description: Geography ID
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Success - Returns the requested data list
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    place_id:
                      type: integer
                    place_name:
                      type: string
                    place_picture:
                      type: string
                    place_map:
                      type: string
                    province_th:
                      type: string
                    geography_id:
                      type: integer 
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"

#----------------------------- province central -----------------------------#

#/province_central:
    #get:
     # tags: [location_region]
     # summary: Retrieve province_central, district, subdistrict, and region information
     # description: Fetch all data from the database related to province_central, districts, subdistricts, postal codes, and regions
     # responses:
     #   '200':
     #     description: Success - Returns the requested data list
     #     content:
     #       application/json:
     #         schema:
     #           type: array
     #           items:
     #             type: object
     #             properties:
     #               place_id:
     #                 type: integer
     #               place_name:
     #                 type: string
     #               place_picture:
     #                 type: string
     #               place_map:
     #                 type: string
     #               province_th:
     #                 type: string
     #               geography_id:
     #                 type: string
     #   '500':
     #     description: Server error
     #     content:
     #       application/json:
     #         schema:
     #           type: object
     #           properties:
     #             error:
     #               type: string
     #               example: "Internal Server Error"

#----------------------------- province_northern -----------------------------#

  #/province_northern:
    #get:
    #  tags: [location_region]
    #  summary: Retrieve province_northern, district, subdistrict, and region information
    #  description: Fetch all data from the database related to province_northern, districts, subdistricts, postal codes, and regions
    #  responses:
    #    '200':
    #      description: Success - Returns the requested data list
    #      content:
    #        application/json:
    #          schema:
    #            type: array
    #            items:
    #              type: object
    #              properties:
    #                place_id:
    #                  type: integer
    #                place_name:
    #                  type: string
    #                place_picture:
    #                  type: string
    #                place_map:
    #                  type: string
    #                province_th:
    #                  type: string
    #                geography_id:
    #                  type: string
    #    '500':
    #      description: Server error
    #      content:
    #        application/json:
    #          schema:
    #            type: object
    #            properties:
    #              error:
    #                type: string
    #                example: "Internal Server Error"

#----------------------------- province_northeast -----------------------------#

  #/province_northeast:
    #get:
    #  tags: [location_region]
    #  summary: Retrieve province_northeast, district, subdistrict, and region information
    #  description: Fetch all data from the database related to province_northeast, districts, subdistricts, postal codes, and regions
    #  responses:
    #    '200':
    #      description: Success - Returns the requested data list
    #      content:
    #        application/json:
    #          schema:
    #            type: array
    #            items:
    #              type: object
     #             properties:
    #                place_id:
    #                  type: integer
    #                place_name:
    #                  type: string
    #                place_picture:
    #                  type: string
    #                place_map:
    #                  type: string
    #                province_th:
    #                  type: string
    #                geography_id:
    #                  type: string
    #    '500':
    #      description: Server error
    #      content:
    #        application/json:
    #          schema:
    #            type: object
    #            properties:
    #              error:
    #                type: string
    #                example: "Internal Server Error"

#----------------------------- province_south -----------------------------#

  #/province_south:
   # get:
    #  tags: [location_region]
    #  summary: Retrieve province_south, district, subdistrict, and region information
    #  description: Fetch all data from the database related to province_south, districts, subdistricts, postal codes, and regions
    #  responses:
    #    '200':
    #      description: Success - Returns the requested data list
    #      content:
    #        application/json:
    #          schema:
    #            type: array
    #            items:
    #              type: object
    #              properties:
    #                place_id:
    #                  type: integer
    #                place_name:
    #                  type: string
    #                place_picture:
    #                  type: string
    #                place_map:
    #                  type: string
    #                province_th:
    #                  type: string
    #                geography_id:
    #                  type: string
    #    '500':
    #      description: Server error
    #      content:
    #        application/json:
    #          schema:
    #            type: object
    #            properties:
    #              error:
    #                type: string
    #                example: "Internal Server Error"

#----------------------------- qa_picture -----------------------------#

  /qa_picture:
    get:
      tags: [qa_questions]
      summary: Returns a list of qa_picture.
      responses:
        "200":
          description: A JSON array of qa_picture
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    picture_id:
                      format: int64
                    picture_url:
                      type: string

#----------------------------- qa_traveling -----------------------------#

  /qa_traveling:
    get:
      tags: [qa_questions]
      summary: Returns a list of qa_traveling.
      responses:
        "200":
          description: A JSON array of qa_traveling
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    traveling_id :
                      format: int64
                    traveling_choice:
                      type: string

 #----------------------------- qa_distance -----------------------------#

  /qa_distance:
    get:
      tags: [qa_questions]
      summary: Returns a list of qa_distance.
      responses:
        "200":
          description: A JSON array of qa_distance
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    distance_id:
                      format: int64
                    distance_km:
                      type: string

 #----------------------------- test_longdo -----------------------------#

  /search_nearby:
    get:
      tags: [Test longdo]
      summary: ค้นหาสถานที่ใกล้เคียง
      description: ดึงข้อมูลสถานที่รอบๆ ตามพิกัดที่กำหนด
      parameters:
        - name: postcode
          in: query
          required: true
          schema:
            type: number
          description: รหัสไปรษณีย์ของสถานที่ที่ต้องการค้นหา
        - name: radius
          in: query
          required: true
          schema:
            type: integer
          description: ระยะทางค้นหา (เมตร)
      responses:
        "200":
          description: ข้อมูลสถานที่ที่พบ
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    address:
                      type: string
                    lat:
                      type: number
                    lon:
                      type: number
        "400":
          description: ข้อมูลที่ส่งมาไม่ถูกต้อง
        "500":
          description: เซิร์ฟเวอร์มีปัญหา
